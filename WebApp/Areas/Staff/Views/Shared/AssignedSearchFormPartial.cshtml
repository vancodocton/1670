@model WebApp.Areas.Staff.Data.AssignedSearchVewModel

@using (Html.BeginForm(null, null, FormMethod.Get))
{
	@Html.ValidationSummary("", new { @class = "text-danger" });
	<div class="form-group mb-3">
		@Html.LabelFor(m => m.UserRole, new { @class = "col-md-2 control-label" })
		<div class="col-md-10">
			@Html.DropDownListFor(m => m.UserRole, new SelectList(Model.Roles), new { @class = "form-select", required = "required" })
			@Html.ValidationMessageFor(m => m.UserRole)
		</div>
	</div>

	<div class="form-group mb-3">
		@Html.LabelFor(m => m.Keyword, new { @class = "col-md-2 control-label" })
		<div class="col-md-10">
			@Html.TextBoxFor(m => m.Keyword, new { @class = "form-control" })
			@Html.ValidationMessageFor(m => m.Keyword)
		</div>
	</div>

	<div class="form-group mb-3">
		<div class="col-md-offset-2 col-md-10">
			<input id="submit" type="submit" class="btn btn-primary" value="Search" />
		</div>
	</div>
}
@*<script>
	$('#submit').click(function (e) {
		'use strict'

		// Fetch all the forms we want to apply custom Bootstrap validation styles to
		var forms = document.querySelectorAll('.needs-validation')

		// Loop over them and prevent submission
		Array.prototype.slice.call(forms)
			.forEach(function (form) {
				form.addEventListener('submit', function (event) {
					if (!form.checkValidity()) {
						event.preventDefault()
						event.stopPropagation()
					}

					form.classList.add('was-validated')
				}, false)
			})
	});
</script>*@
